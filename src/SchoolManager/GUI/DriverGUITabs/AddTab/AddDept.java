package SchoolManager.GUI.DriverGUITabs.AddTab;

import SchoolManager.Driver;
import SchoolManager.EmployeeManager.Employee;
import SchoolManager.EmployeeManager.EmployeeTypes.Manager;
import SchoolManager.GUI.DriverGUI;
import SchoolManager.Utilities;

import javax.swing.*;
import java.util.ArrayList;

import static SchoolManager.Driver.logger;
import static SchoolManager.GUI.DriverGUI.ICON;

public class AddDept
{
    private JComboBox<String> managerListBox;
    private JTextField deptNameTextField;
    private JButton cancelButton;
    private JButton addDepartmentButton;
    private JPanel addDeptPanel;
    private final Driver driver;
    private ArrayList<String> arrayList;
    private Manager manager;


    public AddDept(JPanel parent, Driver driver)
    {
        this.driver = driver;
        populateComboBoxes(driver, parent);
        cancelButton.addActionListener(e -> DriverGUI.changePanel(parent));
    }

    private void populateComboBoxes(Driver driver, JPanel parent)
    {
        arrayList = new ArrayList<>();
        for (Employee e : driver.getEmpAPI().getEmployees())
        {
            try
            {
                Manager m = (Manager) e;
                arrayList.add(m.getFirstName() + " " + m.getSecondName());
            } catch (ClassCastException a)
            {
                logger.log(a);
            }
        }
        if (arrayList.isEmpty())
        {
            arrayList.add("There are no Managers.");
            //Some help from https://stackoverflow.com/questions/1291704/how-do-i-populate-a-jcombobox-with-an-arraylist
            //I was trying to use the custom creation method generated by the form, but it is called before the constructor.
            managerListBox.setModel(new DefaultComboBoxModel<>(arrayList.toArray(new String[0])));
            addDepartmentButton.addActionListener(e -> JOptionPane.showMessageDialog(addDeptPanel, "There are no Managers.", "Error", JOptionPane.ERROR_MESSAGE, ICON));
        } else
        {
            addDepartmentButton.addActionListener(e ->
            {
                if (validData())
                {
                    try
                    {
                        if (driver.getSchool().addDept(deptNameTextField.getText(), manager))
                        {
                            DriverGUI.changePanel(parent);
                        } else
                        {
                            JOptionPane.showMessageDialog(addDeptPanel, "This manager is already managing this department.", "Error", JOptionPane.ERROR_MESSAGE, ICON);
                        }
                    } catch (UnsupportedOperationException f)
                    {
                        JOptionPane.showMessageDialog(addDeptPanel, f.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, ICON);
                    }
                }
            });
        }
        managerListBox.setModel(new DefaultComboBoxModel<>(arrayList.toArray(new String[0])));
    }

    private boolean validData()
    {
        int index = managerListBox.getSelectedIndex();
        String fullName = arrayList.get(index);
        manager = null;
        String deptName = deptNameTextField.getText();
        for (Employee e : driver.getEmpAPI().getEmployees())
        {
            try
            {
                Manager m = (Manager) e;
                if ((m.getFirstName() + " " + m.getSecondName()).equals(fullName))
                {
                    //Found the selected Manager
                    manager = m;
                }
            } catch (ClassCastException a)
            {
                logger.log(a);
            }
        }
        if (manager != null)
        {
            //Manager is valid. continue from here.
            if (Utilities.max30Chars(deptName))
            {
                //deptName is valid.
                return true;
            } else
            {
                logger.log("Department name was more than 30 chars.");
                JOptionPane.showMessageDialog(addDeptPanel, "Please enter a maximum of 30 characters for the Department Name.", "Error", JOptionPane.ERROR_MESSAGE, ICON);
                return false;
            }
        } else
        {
            logger.log("Unable to determine which manager was selected.");
            JOptionPane.showMessageDialog(addDeptPanel, "Unable to determine which manager was selected.", "Error", JOptionPane.ERROR_MESSAGE, ICON);
            return false;
            //shouldn't happen, but hey, who knows.
        }
    }

    private void createUIComponents()
    {
        // TODO: place custom component creation code here
    }

    public JPanel getPanel()
    {
        return this.addDeptPanel;
    }

    public Driver getDriver()
    {
        return driver;
    }
}
